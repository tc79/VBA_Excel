Sub FixReport()
'
' FixBalanceSheet Macro
' Fix the raw balance sheet report from Simply Accounting.
'
	
'	Dim Cols(1) As Array
'	Cols(0) = 2
'	Cols(1) = 4
   
  Dim LookFor As Range 
	Dim Found As String
	Dim beginAt As Range, endAt As Range, rng As Range 'Set the ranges for the sum to get the subtotal
	Dim place As String 'String with the address of a cell that will contain a subtotal
	Dim WhereToLook As Range 'Range where subtotals are to be found
  
  'Set workbook and worksheet
	With Sheets("Sheet1")
		Set WhereToLook = Range("A5:F500")
		'Every cell containing a subtotal has an upper border. So, look for cells containing border!
		With Application.FindFormat.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
		End With
		'Call search using .Find
    Set LookFor = WhereToLook.Find(What:="", After:=Cells(5, 2), _
				LookIn:=xlFormulas, LookAt:= xlPart, _
				SearchOrder:=xlByRows, SearchDirection:=xlNext, _
				MatchCase:=False, SearchFormat:=True)
		If Not LookFor Is Nothing Then 'Test if a cell with a bottom border is found
			'What happens when a subtotal cell is found:
			Found = LookFor.Address
			Debug.Print "Found at: " & Found
			'Loop to set a range, sum values and put them in the right cell
			Do
				'Find out the range to calculate subtotal
				Set endAt = Range(Found) 'Last cell in the range
				Debug.Print "endAt (last row of the range) is: " & endAt.Address
				Set beginAt = endAt.End(xlUp) 'First cell in the range
				Debug.Print "beginAt (first row of the range) is: " & beginAt.Address
				Set rng = Range(beginAt, endAt) 'Range of values to sum
				Debug.Print "Range of cells to sum is: " & rng.Address
				'Sum values and put it in the right cell
				place = endAt.Address
				Debug.Print "Cell where subtotal will be is: " & place
				Range(place).Offset(1, 0).Value = Application.WorksheetFunction.Sum(rng)
				Debug.Print "Subtotal: " & Range(place).Offset(1, 0).Value
				'Call for next search
				Set LookFor = WhereToLook.Find(What:="", After:=endAt, _
						LookIn:=xlFormulas, LookAt:= xlPart, _
						SearchOrder:=xlByRows, SearchDirection:=xlNext, _
						MatchCase:=False, SearchFormat:=True)
				Debug.Print "LookFor now is: " & LookFor.Address
				REM If LookFor.Address = Found Then ' Do not allow wrapped search
					REM Exit Do 
				REM End If
			Loop Until LookFor Is Nothing Or LookFor.Address = Found ' Do not allow wrapped search
		End If
	End With	
End Sub

REM ***Notes***
REM FindNext does not work properly when using the SearchFormat argument because FindNext does not respect the SearchFormat specification.  So, if the search criteria include format information, you cannot use FindNext to continue the search.  See the section on using the SearchFormat argument for more on how to correctly find all cells.
REM In this approach, using the FindFormat property and the SearchFormat argument, will not find cells that display a format that is the result of conditional formatting.
REM See link below for detailed discussion:
REM http://www.tushar-mehta.com/publish_train/xl_vba_cases/1001%20range.find%20and%20findall.shtml#_Using_the_SearchFormat
